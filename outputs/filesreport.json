[
    {
        "type": "directory",
        "name": "simpleModuleWithScreenRawMaticas",
        "contents": [
            {
                "type": "file",
                "name": "boot.py",
                "full_path": "simpleModuleWithScreenRawMaticas/boot.py",
                "dependencies": [
                    "ext.gc",
                    "ext.time",
                    "int.utils.internet_connection",
                    "int.utils.json_related"
                ],
                "explanation": "The code imports the 'gc' module from the external library, 'time' module from the external library, 'connect2' function from the internal library 'utils.internet_connection', and 'update_json_field' function from the internal library 'utils.json_related'. The code then sets the 'config_file' variable to 'utils/config.json', sleeps for 1 second, connects to the internet using the 'connect2' function with the 'config_file' as a parameter, updates the 'ip' field in the 'config_file' using the 'update_json_field' function, sleeps for 1 second again, and finally performs garbage collection using the 'gc.collect()' method."
            },
            {
                "type": "directory",
                "name": "dependencies",
                "contents": [
                    {
                        "type": "file",
                        "name": "font10.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/font10.py",
                        "dependencies": [],
                        "explanation": "The file contains four functions: height, max_width, hmap, and reverse. Each function returns a specific value: height returns 12, max_width returns 12, hmap returns True, and reverse returns False. The code defines a function named 'monospaced' that takes no arguments and always returns False. The file contains a fragment of binary data, represented as a byte string. The file contains a fragment of binary code, it is not possible to determine its purpose or functionality. The code is a binary string and does not contain any identifiable dependencies or explanations. The code fragment does not contain any dependencies. It assigns a memoryview object '_mvfont' to the memoryview of another object '_font'. This file contains three functions: _chr_addr, get_ch. The _chr_addr function takes an ordinal character value as input and calculates the corresponding address in the _index array. It returns the calculated address as an integer. The get_ch function takes a character as input, converts it to its ordinal value, and checks if it falls within the range of printable ASCII characters (32-126). If not, it assigns the ordinal value of '?' to ordch. It then calls the _chr_addr function to calculate the offset in the _font array for the given ordinal value. It retrieves the width of the character from the _font array and also calculates the offset for the next character. It returns a tuple containing the character data, the height (always 17), and the width of the character."
                    },
                    {
                        "type": "file",
                        "name": "ssd1306.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/ssd1306.py",
                        "dependencies": [
                            "ext.micropython",
                            "ext.framebuf"
                        ],
                        "explanation": "The file contains a class SSD1306 that inherits from framebuf.FrameBuffer. It initializes an OLED display with the specified width, height, and external_vcc. It also includes methods for initializing the display, powering it on/off, adjusting contrast, inverting the display, and showing the buffer on the display. There are two subclasses, SSD1306_I2C and SSD1306_SPI, that inherit from SSD1306 and provide additional methods for communicating with the display using I2C and SPI interfaces respectively."
                    },
                    {
                        "type": "file",
                        "name": "urequests.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/urequests.py",
                        "dependencies": [
                            "ext.usocket",
                            "ext.ujson",
                            "ext.ubinascii",
                            "ext.ussl"
                        ],
                        "explanation": "The file contains a class 'Response' that represents an HTTP response. It has methods to retrieve the content of the response in different formats (text, json). The file also contains functions for making HTTP requests (request, head, get, post, put, patch, delete). The requests are made using the usocket library for socket communication, ujson library for JSON serialization and deserialization, ubinascii library for base64 encoding, and ussl library for secure socket communication (HTTPS)."
                    },
                    {
                        "type": "file",
                        "name": "writer.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/writer.py",
                        "dependencies": [
                            "ext.framebuf",
                            "ext.uctypes",
                            "ext.sys",
                            "int.DisplayState",
                            "int.Writer"
                        ],
                        "explanation": "The code imports the 'framebuf' module from an external library. It also imports 'bytearray_at' and 'addressof' functions from the 'uctypes' module in the same external library. Additionally, it imports the 'implementation' object from the 'sys' module in the external library. The code defines a class called 'DisplayState' with an initializer method. It also defines a private function called '_get_id' that takes a 'device' parameter and checks if it is an instance of 'framebuf.FrameBuffer' class. If not, it raises a 'ValueError' exception. The function returns the id of the 'device' object. The code defines a class called Writer that is used for writing text on a display device. It has methods for setting the text position, initializing the device and font, setting clipping options, printing strings, and calculating the length of a string. The class uses the external library framebuf for manipulating the display and the internal library DisplayState for managing the state of the display. The code contains several methods related to printing characters on a screen. The _get_char method is used to get the glyph, height, and width of a character from a font. The _printchar method prints a character on the screen using the glyph and other parameters. The tabsize method sets the size of a tab, and the setcolor method returns the foreground and background colors. The code contains a class CWriter that inherits from the Writer class. It has a static method create_color that creates a color based on RGB values. The __init__ method initializes the CWriter object with a device, font, foreground color, background color, and verbosity. The _printchar method prints a character on the device's screen. The setcolor method sets the foreground and background colors of the CWriter object."
                    }
                ]
            },
            {
                "type": "directory",
                "name": "html",
                "contents": [
                    {
                        "type": "file",
                        "name": "a.html"
                    },
                    {
                        "type": "file",
                        "name": "albahaca_maticas_v3_heavy_v2_adobe_express.bin"
                    },
                    {
                        "type": "file",
                        "name": "b.html"
                    },
                    {
                        "type": "file",
                        "name": "pages.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/html/pages.py",
                        "dependencies": [
                            "gc",
                            "utils.metrics.Metrics",
                            "modules.initialize_database.db_mod",
                            "ujson",
                            "utils.time_management_module.Time",
                            "int.gc",
                            "int.get_config",
                            "db_mod",
                            "Metrics"
                        ],
                        "explanation": "The file contains a function called 'get_config' that takes a 'config_file' as input. It imports the 'gc' module for garbage collection, the 'Metrics' class from the 'utils.metrics' module, the 'db_mod' function from the 'modules.initialize_database' module, the 'ujson' module for JSON parsing, and the 'Time' class from the 'utils.time_management_module' module. The function reads the contents of the 'config_file' using 'ujson.load', extracts the configuration for the actuators, converts the 'starttime' and 'endtime' values to 'Time' objects, and returns the resulting configuration. The code also defines a function called 'show_config' that takes a 'config_file' as input. It retrieves the configuration from the file using the 'get_config' function. If the configuration type is 'timed', it generates an HTML display with specific formatting. Otherwise, it generates a different HTML display. The resulting display is then returned as a string. The 'gc.collect()' function is called to perform garbage collection. The returned HTML code includes CSS styling and JavaScript functions for button actions. The file also contains a function called 'show_measurements' that retrieves temperature and humidity measurements from a database using the 'db_mod' module. It then calculates the average temperature and humidity for the last 3 hours using the 'Metrics' module. The function generates HTML code to display the latest temperature and humidity measurements, as well as the average temperature and humidity for each hour. The gc module is used to perform garbage collection. The response variable contains the generated HTML code."
                    },
                    {
                        "type": "file",
                        "name": "parsers.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/html/parsers.py",
                        "dependencies": [
                            "int.utils.time_management_module"
                        ],
                        "explanation": "The file contains two functions. The first function 'unquote_to_str' takes a string as input and converts any URL-encoded characters in the string to their corresponding ASCII characters. The second function 'parse_update_response' takes a string response as input and parses it to extract specific values such as name, starttime, endtime, type, minuteson, and minutesoff. It also imports the 'Time' class from the 'utils.time_management_module' module."
                    }
                ]
            },
            {
                "type": "file",
                "name": "main.py",
                "full_path": "simpleModuleWithScreenRawMaticas/main.py",
                "dependencies": [
                    "ext.gc",
                    "int.scheduler",
                    "int.modules.initialize_modules",
                    "int.mods.act_mod",
                    "int.mods.sen_mod",
                    "int.mods.screen_mod",
                    "int.mods.web_mod"
                ],
                "explanation": "The file imports the 'gc' module for garbage collection. It also imports the 'scheduler' module and the 'initialize_modules' module from the 'modules' package. The 'act_mod', 'sen_mod', 'screen_mod', and 'web_mod' modules are imported from the 'initialize_modules' module. The 'Scheduler' class is used from the 'scheduler' module. The 'startup_off' function is called from the 'act_mod' module. Finally, the 'loop' method is called on the 'sch' instance of the 'Scheduler' class."
            },
            {
                "type": "directory",
                "name": "modules",
                "contents": [
                    {
                        "type": "file",
                        "name": "actuators_module.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/actuators_module.py",
                        "dependencies": [
                            "int.utils.time_management_module.Time",
                            "ext.machine.Pin",
                            "ext.ujson.load"
                        ],
                        "explanation": "The file contains two classes: ActuatorWrapper and ActuatorsModule. \n\nActuatorWrapper is a class that represents an actuator. It has attributes such as id, name, type, pin, start_time, end_time, minutes_on, minutes_off, status, and last_used. It also has methods to turn the actuator on and off, handle timed on/off behavior, and a string representation of the actuator.\n\nActuatorsModule is a class that manages multiple actuators. It has a constructor that takes a config_file parameter and loads the configuration from the file. It has methods to initialize the actuators, turn them off during startup, and control them based on the current time."
                    },
                    {
                        "type": "file",
                        "name": "database.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/database.py",
                        "dependencies": [
                            "int.utils.time_management_module",
                            "ext.ujson"
                        ],
                        "explanation": "The file contains two classes: MeasurementList and Database. \n\nMeasurementList is a class that represents a list of measurements. It has methods to append a measurement, get the latest measurement, and generate measurements for a specific hour. The class has attributes such as the list of measurements, the maximum length of the list, the minutes between measurements, and the indices of the oldest and latest measurements.\n\nDatabase is a class that represents a database of registers. It has methods to get a register, add a register, and add a measurement to a register. The class has an attribute for the configuration file and a dictionary to store the registers."
                    },
                    {
                        "type": "file",
                        "name": "initialize_database.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/initialize_database.py",
                        "dependencies": [
                            "int.modules.database.Database",
                            "ext.utils.config.json"
                        ],
                        "explanation": "The file imports the 'Database' class from the 'modules.database' module. It also imports the 'config.json' file from the 'utils' module. The 'Database' class is instantiated with the 'config_file' parameter and stored in the 'db_mod' variable. Two registers are added to the database using the 'add_register' method of the 'db_mod' object."
                    },
                    {
                        "type": "file",
                        "name": "initialize_modules.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/initialize_modules.py",
                        "dependencies": [
                            "ext.dht",
                            "ext.time",
                            "ext.machine",
                            "int.modules.actuators_module",
                            "int.modules.sensors_module",
                            "int.utils.config",
                            "ext.gc",
                            "int.modules.screen_module",
                            "int.modules.web_module"
                        ],
                        "explanation": "The file imports the DHT11 class from the 'dht' module, the sleep function from the 'time' module, the Pin, I2C, and ADC classes from the 'machine' module. It also imports the ActuatorsModule and SensorsModule classes from the 'modules' package. The file uses a config.json file located in the 'utils' package. It defines a measure_temp function that takes measurements from the DHT11 sensor and returns the average temperature. It also defines a measure_hum function that takes measurements from the DHT11 sensor and returns the average humidity. The SensorsModule instance is used to set the measurement functions for the sensors. The file imports the collect function from the 'gc' module to perform garbage collection. It imports the ScreenModule and WebModule classes from the 'modules' package. Finally, it creates instances of the ActuatorsModule, SensorsModule, ScreenModule, and WebModule classes using the config.json file."
                    },
                    {
                        "type": "file",
                        "name": "screen_module.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/screen_module.py",
                        "dependencies": [
                            "ext.framebuf",
                            "ext.machine.Pin",
                            "ext.machine.I2C",
                            "ext.time.sleep",
                            "ext.ujson.load",
                            "int.dependencies.font10",
                            "int.dependencies.writer",
                            "int.dependencies.ssd1306.SSD1306_I2C",
                            "int.utils.internet_connection.connect2",
                            "int.utils.json_related.update_json_field",
                            "int.utils.time_management_module.Time"
                        ],
                        "explanation": "The file contains a class called ScreenModule that initializes a screen module with specified dimensions and pins. It reads a configuration file, sets up the screen, and displays a boot screen with a logo. It has methods to refresh the screen, display different screens for various conditions (need to update, overflow, no connection, exception), display text on the screen, update the IP address, and display the IP address on the screen."
                    },
                    {
                        "type": "file",
                        "name": "sensors_module.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/sensors_module.py",
                        "dependencies": [
                            "gc",
                            "json.load",
                            "utils.time_management_module",
                            "modules.initialize_database"
                        ],
                        "explanation": "The file contains two classes: SensorWrapper and SensorsModule. \n\nSensorWrapper class represents a sensor and has methods for adding measurements to a database, setting a measurement function, measuring the sensor, and performing timed measurements. It also has properties for checking if the sensor is working and a string representation of the sensor.\n\nSensorsModule class represents a module that manages multiple sensors. It has methods for performing timed measurements, initializing sensors from a config file, and setting measurement functions for sensors."
                    },
                    {
                        "type": "file",
                        "name": "web_module.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/web_module.py",
                        "dependencies": [
                            "ext.usocket",
                            "ext.socket",
                            "ext.network",
                            "ext.html.parsers",
                            "int.utils.time_management_module",
                            "int.html.pages",
                            "int.utils.json_related"
                        ],
                        "explanation": "The file contains a class called WebModule that is used to start a web server and handle incoming requests. It uses external libraries such as 'usocket', 'socket', 'network', and 'html.parsers' for socket communication and parsing HTML responses. It also imports internal libraries such as 'utils.time_management_module' for time management and 'html.pages' and 'utils.json_related' for handling different types of requests and generating HTML responses."
                    }
                ]
            },
            {
                "type": "file",
                "name": "scheduler.py",
                "full_path": "simpleModuleWithScreenRawMaticas/scheduler.py",
                "dependencies": [
                    "ext.gc",
                    "ext.time",
                    "ext.machine",
                    "int.utils.json_related",
                    "int.utils.time_management_module",
                    "int.modules.actuators_module",
                    "int.modules.sensors_module",
                    "int.modules.screen_module",
                    "int.modules.web_module",
                    "int.ActuatorsModule",
                    "int.SensorsModule",
                    "int.ScreenModule",
                    "int.WebModule",
                    "int.Time",
                    "ext.reset",
                    "ext.ticks_diff",
                    "ext.ticks_ms",
                    "ext.sleep",
                    "ext.log_error",
                    "ext.MemoryError",
                    "ext.OSError",
                    "ext.Exception"
                ],
                "explanation": "The code imports various modules and libraries for different functionalities. It uses the 'gc' module for garbage collection, 'time' module for time-related operations, 'machine' module for hardware-related operations like resetting the machine. It also imports internal libraries such as 'json_related' and 'time_management_module' from the 'utils' package, 'ActuatorsModule', 'SensorsModule', 'ScreenModule', and 'WebModule' from the 'modules' package. The code likely involves controlling actuators, reading sensors, interacting with a screen, and implementing web-related functionality. The file contains a class called Scheduler. It initializes with four modules: ActuatorsModule, SensorsModule, ScreenModule, and WebModule. It has methods for cleaning memory, getting memory usage percentage, updating time, and running a loop. The loop method handles exceptions such as MemoryError, OSError, and Exception. The _loop method is called within the loop method and handles time updates, memory cleaning, handling actuators, handling sensors, handling the screen, serving web requests, checking for updates, and checking memory usage percentage."
            },
            {
                "type": "file",
                "name": "upload_files"
            },
            {
                "type": "directory",
                "name": "utils",
                "contents": [
                    {
                        "type": "file",
                        "name": "a2.pbm"
                    },
                    {
                        "type": "file",
                        "name": "config.json"
                    },
                    {
                        "type": "file",
                        "name": "internet_connection.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/internet_connection.py",
                        "dependencies": [
                            "ext.network",
                            "ext.utime",
                            "ext.json"
                        ],
                        "explanation": "The file contains a function called 'connect2' that connects to a WiFi network using the configuration specified in a JSON file. It uses the 'network' module for WiFi connectivity, 'utime' module for sleep functionality, and 'json' module for loading the configuration file. The 'connect2' function checks if the device is already connected to a network and if not, attempts to connect using the provided SSID and password. It waits for a maximum of 600 seconds for the connection to be established. If the connection fails, it disconnects and deactivates the WiFi interface. If the 'doreconnect' parameter is set to True, it calls the 'reconnect' function to attempt reconnection. The 'reconnect' function disconnects and deactivates the WiFi interface before calling the 'connect2' function again."
                    },
                    {
                        "type": "file",
                        "name": "json_related.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/json_related.py",
                        "dependencies": [
                            "ext.ujson"
                        ],
                        "explanation": "The file contains three functions: update_json_field, update_json_actuator, and log_error. These functions are used to update and log data in a JSON file. The file uses the ujson library for JSON encoding and decoding."
                    },
                    {
                        "type": "file",
                        "name": "metrics.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/metrics.py",
                        "dependencies": [],
                        "explanation": "The file contains a class called Metrics. It has a constructor (__init__) which does nothing. It also has a static method called get_average, which takes an iterator as input and returns the average of the non-negative values in the iterator. It skips over None values and negative values. The average is rounded to 2 decimal places. If the iterator is empty or contains only None or negative values, it returns 0."
                    },
                    {
                        "type": "file",
                        "name": "time_management_module.py",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/time_management_module.py",
                        "dependencies": [
                            "ext.dependencies.urequests",
                            "int.time",
                            "int.sleep",
                            "int.Exception"
                        ],
                        "explanation": "The file contains a function to get the current time from different time providers, a function to parse the datetime string, and a class called Time with various methods for manipulating time. The Time class has methods for converting time to total minutes, total seconds, and total hours, as well as comparison methods (__gt__, __ge__, __lt__, __eq__) and arithmetic methods (__sub__, __add__). The class also has a __str__ method for displaying the time in a formatted string."
                    }
                ]
            },
            {
                "type": "External dependency",
                "name": "ext.gc",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.gc",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.time",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.time",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.micropython",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.micropython",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.framebuf",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.framebuf",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.usocket",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.usocket",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.ujson",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.ujson",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.ubinascii",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.ubinascii",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.ussl",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.ussl",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.uctypes",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.uctypes",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.sys",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.sys",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "gc",
                "full_path": "simpleModuleWithScreenRawMaticas/gc",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "utils.metrics.Metrics",
                "full_path": "simpleModuleWithScreenRawMaticas/utils.metrics.Metrics",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "modules.initialize_database.db_mod",
                "full_path": "simpleModuleWithScreenRawMaticas/modules.initialize_database.db_mod",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ujson",
                "full_path": "simpleModuleWithScreenRawMaticas/ujson",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "utils.time_management_module.Time",
                "full_path": "simpleModuleWithScreenRawMaticas/utils.time_management_module.Time",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "db_mod",
                "full_path": "simpleModuleWithScreenRawMaticas/db_mod",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "Metrics",
                "full_path": "simpleModuleWithScreenRawMaticas/Metrics",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.machine.Pin",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.machine.Pin",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.ujson.load",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.ujson.load",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.utils.config.json",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.utils.config.json",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.dht",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.dht",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.machine",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.machine",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.machine.I2C",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.machine.I2C",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.time.sleep",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.time.sleep",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "json.load",
                "full_path": "simpleModuleWithScreenRawMaticas/json.load",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "utils.time_management_module",
                "full_path": "simpleModuleWithScreenRawMaticas/utils.time_management_module",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "modules.initialize_database",
                "full_path": "simpleModuleWithScreenRawMaticas/modules.initialize_database",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.socket",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.socket",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.network",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.network",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.html.parsers",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.html.parsers",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.reset",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.reset",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.ticks_diff",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.ticks_diff",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.ticks_ms",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.ticks_ms",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.sleep",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.sleep",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.log_error",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.log_error",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.MemoryError",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.MemoryError",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.OSError",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.OSError",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.Exception",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.Exception",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.utime",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.utime",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.json",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.json",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext.dependencies.urequests",
                "full_path": "simpleModuleWithScreenRawMaticas/ext.dependencies.urequests",
                "dependencies": [],
                "explanation": ""
            }
        ]
    },
    {
        "type": "report",
        "directories": 5,
        "files": 26
    }
]