[
    {
        "type": "directory",
        "name": "Arquitectura",
        "explanation": "The folder \"Arquitectura\" contains two files: \"ALU.py\" and \"Calculator.py\". \n\n\"ALU.py\" imports external libraries such as numpy, pandas, matplotlib, and seaborn. It also imports internal modules from the Operations directory for performing arithmetic operations. The ALU class represents an Arithmetic Logic Unit and contains methods for calculating arithmetic expressions using the imported modules.\n\n\"Calculator.py\" imports the ALU class from the internal library 'ALU'. The Calculator class has a menu method that alternates between processing an operator and an operand using the ALU instance. The main method calls the menu method to start the calculator.\n\nAdditionally, there is a directory named \"Operations\" inside the \"Arquitectura\" folder.",
        "children": [
            {
                "type": "file",
                "name": "ALU",
                "full_path": "Arquitectura/ALU",
                "id": "int/ALU",
                "dependencies": [
                    "ext/numpy",
                    "ext/pandas",
                    "ext/matplotlib",
                    "ext/seaborn",
                    "int/Operations/Sum",
                    "int/Operations/Subtract",
                    "int/Operations/Multiply",
                    "int/Operations/Divide",
                    "int/Operations/Power",
                    "int/Operations/IntDivide"
                ],
                "explanation": "The code imports external libraries such as numpy, pandas, matplotlib, and seaborn. It also imports internal modules from the Operations directory for performing arithmetic operations. The ALU class represents an Arithmetic Logic Unit and contains methods for calculating arithmetic expressions using the imported modules.",
                "times_called": 1
            },
            {
                "type": "file",
                "name": "Calculator",
                "full_path": "Arquitectura/Calculator",
                "id": "int/Calculator",
                "dependencies": [
                    "int/ALU",
                    "int/Operations/Divide",
                    "int/Operations/IntDivide",
                    "int/Operations/Multiply",
                    "int/Operations/Operation",
                    "int/Operations/Power",
                    "int/Operations/Subtract",
                    "int/Operations/Sum"
                ],
                "explanation": "The code imports the ALU class from the internal library 'ALU'. The Calculator class has a menu method that alternates between processing an operator and an operand using the ALU instance. The main method calls the menu method to start the calculator."
            },
            {
                "type": "directory",
                "name": "Operations",
                "explanation": "The folder 'Arquitectura/Operations' contains several files that perform different mathematical operations. Each file represents a specific operation, such as division, integer division, multiplication, power, subtraction, and summation. These files are part of the internal library 'int/Operations'. They import the 'Operation' class from this library and override its methods to perform their respective calculations. Some files also have dependencies on external libraries, such as 'ext/abc'. The explanations provided for each file give a brief overview of their functionality and purpose within the project.",
                "children": [
                    {
                        "type": "file",
                        "name": "Divide",
                        "full_path": "Arquitectura/Operations/Divide",
                        "id": "int/Operations/Divide",
                        "dependencies": [
                            "int/Operations/Operation"
                        ],
                        "explanation": "The code imports the 'Operation' class from the internal library 'int/Operations/Operation'. The 'Divide' class inherits from the 'Operation' class and overrides the 'calculate' method to perform division. If the second operand is 0, a ValueError is raised. The 'calculate' method returns the result of dividing the first operand by the second operand.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "IntDivide",
                        "full_path": "Arquitectura/Operations/IntDivide",
                        "id": "int/Operations/IntDivide",
                        "dependencies": [
                            "int/Operations/Operation"
                        ],
                        "explanation": "The code imports the 'Operation' class from the internal library 'int/Operations/Operation'. The 'IntDivide' class inherits from the 'Operation' class and overrides the 'calculate' method to perform integer division. If the second operand is 0, a ValueError is raised.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "Multiply",
                        "full_path": "Arquitectura/Operations/Multiply",
                        "id": "int/Operations/Multiply",
                        "dependencies": [
                            "int/Operations/Operation"
                        ],
                        "explanation": "The Multiply class is a subclass of the Operation class. It takes two float numbers as input and calculates their product using the calculate method.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "Operation",
                        "full_path": "Arquitectura/Operations/Operation",
                        "id": "int/Operations/Operation",
                        "dependencies": [
                            "ext/abc"
                        ],
                        "explanation": "The code imports the ABC class from the abc module. The Operation class is an abstract base class that defines a constructor and an abstract method called 'calculate'.",
                        "times_called": 7
                    },
                    {
                        "type": "file",
                        "name": "Power",
                        "full_path": "Arquitectura/Operations/Power",
                        "id": "int/Operations/Power",
                        "dependencies": [
                            "int/Operations/Operation"
                        ],
                        "explanation": "The Power class is a subclass of the Operation class. It takes two float numbers as input and calculates the power of the first number raised to the second number.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "Subtract",
                        "full_path": "Arquitectura/Operations/Subtract",
                        "id": "int/Operations/Subtract",
                        "dependencies": [
                            "int/Operations/Operation"
                        ],
                        "explanation": "The Subtract class is a subclass of the Operation class. It overrides the calculate method to perform subtraction between two numbers. The code imports the Operation module from the internal library, 'int/Operations/Operation'.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "Sum",
                        "full_path": "Arquitectura/Operations/Sum",
                        "id": "int/Operations/Sum",
                        "dependencies": [
                            "int/Operations/Operation"
                        ],
                        "explanation": "The code imports the 'Operation' class from the internal library 'Operations'. The 'Sum' class inherits from the 'Operation' class and overrides the 'calculate' method to return the sum of two numbers.",
                        "times_called": 2
                    }
                ]
            },
            {
                "type": "External dependency",
                "name": "ext/numpy",
                "times_called": 1,
                "full_path": "Arquitectura/ext/numpy",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/pandas",
                "times_called": 1,
                "full_path": "Arquitectura/ext/pandas",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/matplotlib",
                "times_called": 1,
                "full_path": "Arquitectura/ext/matplotlib",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/seaborn",
                "times_called": 1,
                "full_path": "Arquitectura/ext/seaborn",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/abc",
                "times_called": 1,
                "full_path": "Arquitectura/ext/abc",
                "dependencies": [],
                "explanation": ""
            }
        ]
    },
    {
        "type": "report",
        "directories": 2,
        "files": 9,
        "coupling": "medium",
        "cohesion": "high",
        "explanation": "The project has a medium level of coupling because there are dependencies between different modules and external libraries. The ALU module imports external libraries such as numpy, pandas, matplotlib, and seaborn, and also imports internal modules from the Operations directory for performing arithmetic operations. The Calculator module depends on the ALU module. However, the project has a high level of cohesion because each module has a clear and specific purpose within the project. The ALU module represents an Arithmetic Logic Unit and contains methods for calculating arithmetic expressions using the imported modules. The Operations directory contains files that perform different mathematical operations, and each file overrides the methods of the Operation class to perform its respective calculation. This high level of cohesion indicates that each module is focused on a single task, which can lead to better maintainability and reusability of code."
    }
]