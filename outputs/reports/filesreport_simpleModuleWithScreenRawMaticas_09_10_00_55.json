[
    {
        "type": "directory",
        "name": "simpleModuleWithScreenRawMaticas",
        "explanation": "\"The folder 'simpleModuleWithScreenRawMaticas' contains various files and directories. The 'boot.py' file imports functions from internal libraries for connecting to the internet and updating a JSON file, as well as external modules for garbage collection. The 'main.py' file imports modules internally from the 'modules' package and an external scheduler module. The 'scheduler.py' file imports multiple modules and libraries, including built-in micropython libraries. It defines a Scheduler class with methods for memory management, time updates, module handling, and running an infinite loop.\"",
        "children": [
            {
                "type": "file",
                "name": "boot",
                "full_path": "simpleModuleWithScreenRawMaticas/boot",
                "id": "int/boot",
                "dependencies": [
                    "int/utils/internet_connection",
                    "int/utils/json_related",
                    "ext/gc",
                    "ext/time"
                ],
                "explanation": "The code imports the 'connect2' function from the internal library 'utils.internet_connection' and the 'update_json_field' function from the internal library 'utils.json_related'. It also imports the 'gc' module and the 'sleep' function from the external libraries. The code connects to the internet, updates a field in a JSON file, and performs garbage collection."
            },
            {
                "type": "directory",
                "name": "dependencies",
                "explanation": "\"The folder 'dependencies' contains several files that are used for different purposes. The 'font10.py' file is a font library and also includes drivers for the SSD1306 display, module for making HTTP requests, and a library for writing text on the display. The 'ssd1306.py' file imports modules for controlling an SSD1306 display and defines classes for initializing and controlling the display. The 'urequests.py' file imports various modules for handling HTTP requests and defines a class for sending requests. The 'writer.py' file imports modules for displaying text and defines classes for setting text positions, printing strings, and adding color support.\"",
                "children": [
                    {
                        "type": "file",
                        "name": "font10",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/font10",
                        "id": "int/dependencies/font10",
                        "dependencies": [
                            "int/dependencies/font10",
                            "int/dependencies/ssd1306",
                            "int/dependencies/urequests",
                            "int/dependencies/writer"
                        ],
                        "explanation": "The file contains a font library 'font10', a driver for the SSD1306 display 'ssd1306', a module for making HTTP requests 'urequests', and a library for writing text on the display 'writer'. The code defines several functions related to screen settings and returns the necessary data for displaying characters.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "ssd1306",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/ssd1306",
                        "id": "int/dependencies/ssd1306",
                        "dependencies": [
                            "ext/micropython",
                            "ext/framebuf"
                        ],
                        "explanation": "The code imports the 'const' module from 'micropython' and the 'FrameBuffer' class from 'framebuf'. The code also defines two classes, 'SSD1306' and its subclasses 'SSD1306_I2C' and 'SSD1306_SPI', which inherit from 'FrameBuffer'. These classes provide methods for initializing and controlling an SSD1306 display. The code sets various constants using the 'const' module and implements methods for power control, contrast adjustment, inversion, and displaying data on the screen.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "urequests",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/urequests",
                        "id": "int/dependencies/urequests",
                        "dependencies": [
                            "ext/usocket",
                            "ext/ubinascii",
                            "ext/ujson",
                            "ext/usocket",
                            "ext/ussl"
                        ],
                        "explanation": "The code imports several modules such as usocket, ubinascii, ujson, and ussl. It also defines a Response class with methods for handling HTTP responses. The request function is used to send HTTP requests and supports various methods like GET, POST, PUT, PATCH, and DELETE.",
                        "times_called": 1
                    },
                    {
                        "type": "file",
                        "name": "writer",
                        "full_path": "simpleModuleWithScreenRawMaticas/dependencies/writer",
                        "id": "int/dependencies/writer",
                        "dependencies": [
                            "ext/utils/framebuf",
                            "ext/utils/uctypes",
                            "ext/utils/sys"
                        ],
                        "explanation": "The code imports the 'framebuf' module from the internal library 'utils', the 'uctypes' module from the internal library 'utils', and the 'sys' module from the internal library 'utils'. The code also defines a class called 'DisplayState' and a class called 'Writer'. The Writer class has several methods for setting text positions, initializing the device and font, printing strings, setting clip options, getting string lengths, and printing characters. The CWriter class is a subclass of Writer and adds support for color.",
                        "times_called": 2
                    }
                ]
            },
            {
                "type": "directory",
                "name": "html",
                "explanation": "\"The folder contains several files, including 'a.html', 'albahaca_maticas_v3_heavy_v2_adobe_express.bin', 'b.html', 'pages.py', and 'parsers.py'. The 'pages.py' file imports the 'Metrics' class from 'utils.metrics', the 'db_mod' module from 'modules.initialize_database', and the 'Time' class from 'utils.time_management_module'. It also uses the 'gc' module from the MicroPython standard library. The 'parsers.py' file has two functions: 'unquote_to_str' and 'parse_update_response'. The 'parse_update_response' function imports the 'Time' class from 'utils/time_management_module'.\"",
                "children": [
                    {
                        "type": "file",
                        "name": "a.html"
                    },
                    {
                        "type": "file",
                        "name": "albahaca_maticas_v3_heavy_v2_adobe_express.bin"
                    },
                    {
                        "type": "file",
                        "name": "b.html"
                    },
                    {
                        "type": "file",
                        "name": "pages",
                        "full_path": "simpleModuleWithScreenRawMaticas/html/pages",
                        "id": "int/html/pages",
                        "dependencies": [
                            "int/utils/metrics",
                            "int/modules/initialize_database",
                            "int/utils/time_management_module"
                        ],
                        "explanation": "The code imports the 'Metrics' class from the internal library 'utils.metrics', the 'db_mod' module from the internal library 'modules.initialize_database', and the 'Time' class from the internal library 'utils.time_management_module'. The code also uses the 'gc' module from the MicroPython standard library."
                    },
                    {
                        "type": "file",
                        "name": "parsers",
                        "full_path": "simpleModuleWithScreenRawMaticas/html/parsers",
                        "id": "int/html/parsers",
                        "dependencies": [
                            "int/utils/time_management_module"
                        ],
                        "explanation": "The code contains two functions: 'unquote_to_str' and 'parse_update_response'. The 'unquote_to_str' function decodes a URL-encoded string, while the 'parse_update_response' function parses a response string and returns a dictionary. The 'parse_update_response' function imports the 'Time' class from the internal library 'utils/time_management_module'.",
                        "times_called": 1
                    }
                ]
            },
            {
                "type": "file",
                "name": "main",
                "full_path": "simpleModuleWithScreenRawMaticas/main",
                "id": "int/main",
                "dependencies": [
                    "ext/gc",
                    "ext/scheduler",
                    "int/modules/initialize_modules",
                    "int/modules/actuators_module",
                    "int/modules/sensors_module",
                    "int/modules/screen_module",
                    "int/modules/web_module"
                ],
                "explanation": "The code imports the 'gc' module internally and the 'scheduler' module externally. It also imports the 'initialize_modules', 'actuators_module', 'sensors_module', 'screen_module', and 'web_module' modules internally from the 'modules' package."
            },
            {
                "type": "directory",
                "name": "modules",
                "explanation": "\"The folder contains several files that perform different functions. The 'actuators_module.py' file controls actuators based on time, using internal and external libraries. The 'database.py' file manages registers of measurements with a specified time interval. The 'initialize_database.py' file imports the 'Database' class and adds registers to it. The 'initialize_modules.py' file imports various modules and classes for initializing different modules. The 'screen_module.py' file initializes the screen module and displays screens based on conditions. The 'sensors_module.py' file imports modules and defines classes for sensor functionality. The 'web_module.py' file imports modules and uses functions for web-related tasks.\"",
                "children": [
                    {
                        "type": "file",
                        "name": "actuators_module",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/actuators_module",
                        "id": "int/modules/actuators_module",
                        "dependencies": [
                            "int/utils/time_management_module",
                            "ext/ujson",
                            "ext/machine"
                        ],
                        "explanation": "The code imports the 'Time' class from the internal library 'utils/time_management_module'. It also imports the 'load' function from the external library 'ujson' and the 'Pin' class from the external library 'machine'. The code defines two classes: 'ActuatorWrapper' and 'ActuatorsModule', which have methods for controlling actuators based on time. The 'ActuatorsModule' class uses the 'load' function to read a configuration file.",
                        "times_called": 3
                    },
                    {
                        "type": "file",
                        "name": "database",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/database",
                        "id": "int/modules/database",
                        "dependencies": [
                            "int/utils/time_management_module",
                            "ext/ujson"
                        ],
                        "explanation": "The code contains two classes: MeasurementList and Database. MeasurementList is used to store measurements with a specified time interval between each measurement. Database is used to manage registers of MeasurementLists. The code imports the Time class from 'utils/time_management_module' internally and ujson externally for reading the config file.",
                        "times_called": 1
                    },
                    {
                        "type": "file",
                        "name": "initialize_database",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/initialize_database",
                        "id": "int/modules/initialize_database",
                        "dependencies": [
                            "int/modules/database",
                            "ext/utils/config.json",
                            "ext/json"
                        ],
                        "explanation": "The code imports the 'Database' class from the internal module 'modules.database'. It also uses the external library 'json' to read the configuration file located at 'utils/config.json'. The code then creates an instance of the 'Database' class and adds two registers with a maximum length of 120 characters each.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "initialize_modules",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/initialize_modules",
                        "id": "int/modules/initialize_modules",
                        "dependencies": [
                            "ext/dht",
                            "ext/time",
                            "ext/machine",
                            "int/modules/actuators_module",
                            "int/modules/sensors_module",
                            "ext/utils/config",
                            "ext/gc",
                            "int/modules/screen_module",
                            "int/modules/web_module"
                        ],
                        "explanation": "The code imports the DHT11 module from the external library 'dht'. It also imports sleep, Pin, I2C, and ADC modules from the internal libraries 'time', 'machine', and 'modules' respectively. The code uses the ActuatorsModule and SensorsModule classes from the internal library 'modules.actuators_module' and 'modules.sensors_module'. It also imports the config_file variable from the internal library 'utils.config.json'. Additionally, it imports the collect function from the internal library 'gc'. Finally, it imports the ScreenModule and WebModule classes from the internal libraries 'modules.screen_module' and 'modules.web_module'.",
                        "times_called": 1
                    },
                    {
                        "type": "file",
                        "name": "screen_module",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/screen_module",
                        "id": "int/modules/screen_module",
                        "dependencies": [
                            "ext/framebuf",
                            "ext/machine/Pin",
                            "ext/machine/I2C",
                            "ext/time/sleep",
                            "ext/ujson/load",
                            "int/dependencies/font10",
                            "int/dependencies/writer",
                            "int/dependencies/ssd1306",
                            "int/utils/internet_connection",
                            "int/utils/json_related",
                            "int/utils/time_management_module"
                        ],
                        "explanation": "The code imports various modules and libraries such as framebuf, Pin, I2C, sleep, load, font10, writer, ssd1306, internet_connection, json_related, and time_management_module. The ScreenModule class initializes the screen module with specified configurations and displays different screens based on certain conditions.",
                        "times_called": 3
                    },
                    {
                        "type": "file",
                        "name": "sensors_module",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/sensors_module",
                        "id": "int/modules/sensors_module",
                        "dependencies": [
                            "int/utils/time_management_module",
                            "int/modules/initialize_database",
                            "ext/gc",
                            "ext/json/load"
                        ],
                        "explanation": "The code imports the 'gc' module for garbage collection, the 'load' function from the 'json' module, and two internal modules: 'utils.time_management_module' and 'modules.initialize_database'. The code defines a class 'SensorWrapper' and a class 'SensorsModule', which are the main features of the code. It also uses the 'Time' class from the 'utils/time_management_module' internally.",
                        "times_called": 3
                    },
                    {
                        "type": "file",
                        "name": "web_module",
                        "full_path": "simpleModuleWithScreenRawMaticas/modules/web_module",
                        "id": "int/modules/web_module",
                        "dependencies": [
                            "ext/usocket",
                            "int/html/parsers",
                            "int/utils/time_management_module"
                        ],
                        "explanation": "The code imports the 'usocket' module from an external library, the 'parse_update_response' function from the internal 'html.parsers' module, and the 'Time' class from the internal 'utils.time_management_module' module. The code also uses functions from other internal modules such as 'html.pages', 'utils.json_related', and 'html.pages'.",
                        "times_called": 3
                    }
                ]
            },
            {
                "type": "file",
                "name": "scheduler",
                "full_path": "simpleModuleWithScreenRawMaticas/scheduler",
                "id": "int/scheduler",
                "dependencies": [
                    "int/utils/json_related",
                    "int/utils/time_management_module",
                    "int/modules/actuators_module",
                    "int/modules/sensors_module",
                    "int/modules/screen_module",
                    "int/modules/web_module",
                    "ext/gc",
                    "ext/time",
                    "ext/machine"
                ],
                "explanation": "The code imports various modules and libraries such as json_related, time_management_module, actuators_module, sensors_module, screen_module, web_module. It also imports gc, time, and machine from the built-in micropython library. The code defines a Scheduler class with methods for memory management, updating time, handling modules, and running an infinite loop."
            },
            {
                "type": "file",
                "name": "upload_files"
            },
            {
                "type": "directory",
                "name": "utils",
                "explanation": "\"The folder contains several files, including 'a2.pbm', 'config.json', 'internet_connection.py', 'json_related.py', 'metrics.py', and 'time_management_module.py'. \n\nThe 'internet_connection.py' file imports the 'network' and 'utime' modules from internal libraries and the 'load' function from the external 'json' library. It connects to a WiFi network using the provided configuration file and prints the network configuration.\n\nThe 'json_related.py' file uses the 'ujson' library to read and write JSON files. It includes functions for updating specific fields and settings in JSON files, as well as logging error messages.\n\nThe 'metrics.py' file contains a class called Metrics with a static method 'get_average'. This method calculates the average of non-negative values in an iterator, rounding it to two decimal places.\n\nThe 'time_management_module.py' file imports the 'urequests' module from the external 'dependencies' library and uses the 'sleep' function from the internal 'utils/time_management_module' dependency.\"",
                "children": [
                    {
                        "type": "file",
                        "name": "a2.pbm"
                    },
                    {
                        "type": "file",
                        "name": "config.json"
                    },
                    {
                        "type": "file",
                        "name": "internet_connection",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/internet_connection",
                        "id": "int/utils/internet_connection",
                        "dependencies": [
                            "ext/network",
                            "ext/utime",
                            "ext/json"
                        ],
                        "explanation": "The code imports the 'network' and 'utime' modules from the internal libraries. It also imports the 'load' function from the external 'json' library. The code connects to a WiFi network using the provided configuration file and prints the network configuration.",
                        "times_called": 2
                    },
                    {
                        "type": "file",
                        "name": "json_related",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/json_related",
                        "id": "int/utils/json_related",
                        "dependencies": [
                            "ext/ujson"
                        ],
                        "explanation": "The code uses the ujson library to read and write JSON files. It includes functions to update a specific field in a JSON file, update settings for an actuator in a JSON file, and log error messages in a JSON file.",
                        "times_called": 4
                    },
                    {
                        "type": "file",
                        "name": "metrics",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/metrics",
                        "id": "int/utils/metrics",
                        "dependencies": [
                            "int/metrics",
                            "int/utils/json_related",
                            "int/utils/time_management_module"
                        ],
                        "explanation": "The code contains a class called Metrics that has a static method get_average. This method takes an iterator as input and calculates the average of the non-negative values in the iterator. The average is rounded to two decimal places and returned. The code does not import any external libraries.",
                        "times_called": 1
                    },
                    {
                        "type": "file",
                        "name": "time_management_module",
                        "full_path": "simpleModuleWithScreenRawMaticas/utils/time_management_module",
                        "id": "int/utils/time_management_module",
                        "dependencies": [
                            "ext/dependencies/urequests",
                            "int/utils/time_management_module"
                        ],
                        "explanation": "The code imports the 'urequests' module from the external library 'dependencies'. It also uses the 'sleep' function from the internal dependency 'utils/time_management_module'.",
                        "times_called": 10
                    }
                ]
            },
            {
                "type": "External dependency",
                "name": "ext/gc",
                "times_called": 5,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/gc",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/time",
                "times_called": 3,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/time",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/micropython",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/micropython",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/framebuf",
                "times_called": 2,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/framebuf",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/usocket",
                "times_called": 3,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/usocket",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/ubinascii",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/ubinascii",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/ujson",
                "times_called": 4,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/ujson",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/ussl",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/ussl",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/utils/framebuf",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/utils/framebuf",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/utils/uctypes",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/utils/uctypes",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/utils/sys",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/utils/sys",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/scheduler",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/scheduler",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/machine",
                "times_called": 3,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/machine",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/utils/config.json",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/utils/config.json",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/json",
                "times_called": 2,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/json",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/dht",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/dht",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/utils/config",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/utils/config",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/machine/Pin",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/machine/Pin",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/machine/I2C",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/machine/I2C",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/time/sleep",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/time/sleep",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/ujson/load",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/ujson/load",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/json/load",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/json/load",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/network",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/network",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/utime",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/utime",
                "dependencies": [],
                "explanation": ""
            },
            {
                "type": "External dependency",
                "name": "ext/dependencies/urequests",
                "times_called": 1,
                "full_path": "simpleModuleWithScreenRawMaticas/ext/dependencies/urequests",
                "dependencies": [],
                "explanation": ""
            }
        ]
    },
    {
        "type": "report",
        "directories": 5,
        "files": 26,
        "coupling": "medium",
        "cohesion": "high",
        "explanation": "The project has a medium level of coupling because there are multiple dependencies between different modules and libraries. For example, the 'main.py' file imports modules internally from the 'modules' package and an external scheduler module. The 'scheduler.py' file imports multiple modules and libraries, including built-in micropython libraries. This level of coupling indicates that there is some interdependence between different components of the project.\n\nOn the other hand, the project has a high level of cohesion because each file or directory within the project serves a specific purpose and contains related functionality. For example, the 'actuators_module.py' file controls actuators based on time, while the 'database.py' file manages registers of measurements with a specified time interval. This high level of cohesion indicates that the project's components are well-organized and focused on their respective tasks."
    }
]